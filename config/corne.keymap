/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define HOST_OS 1

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/unicode-chars/german.dtsi"

#define DEFAULT 0
#define NUMBERS 1
#define CODING  2
#define ARROWS  3
#define FUNC    4
#define UMLAUTE 5

led_strip {
    compatible = "zmk,led-strip";
    label = "LED_STRIP";
    chain-length = <27>;
    data-gpios = <&gpioX Y GPIO_ACTIVE_HIGH>;
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &kp ESC   &kp Q &kp W  &kp E &kp R        &kp T        &kp Z &kp U  &kp I     &kp O      &kp P     &kp BSPC
   &kp TAB   &kp A &kp S  &kp D &lt ARROWS F &kp G        &kp H &kp J  &kp K     &kp L      &kp SEMI  &kp GRAVE
   &kp LSHFT &kp Y &kp X  &kp C &kp V        &kp B        &kp N &kp M  &kp COMMA &kp DOT    &kp SLASH &kp LSHFT
                    &kp LCTRL &kp LGUI &lt NUMBERS BSPC   &lt CODING SPACE &lt FUNC RET  &lt UMLAUTE LALT
                        >;
                };
                lower_layer {
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp DEL
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &trans   &kp N4   &kp N5 &kp N6    &kp PLUS &kp EQUAL
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &kp N1   &kp N2 &kp N3    &kp MINUS &trans
                                        &trans     &trans       &kp SPACE      &kp RET  &kp DOT  &kp N0
                        >;
                };

                raise_layer {
                        bindings = <
   &kp GRAVE  &kp EXCL  &kp AT   &kp HASH   &kp DLLR  &kp PRCNT     &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR   &kp RPAR  &kp BSPC
   &kp LCTRL  &kp TILDE &kp HASH &kp SLASH  &kp LBRC  &kp LBKT      &kp RBKT  &kp RBRC  &kp BSLH        &kp MINUS  &kp PLUS  &kp PIPE
   &kp LSHFT  &trans    &trans   &kp DQT    &kp EXCL  &kp LT        &kp GT    &kp QMARK &kp SQT          &kp UNDER  &kp EQUAL &trans
                                 &kp LGUI   &trans    &kp SPACE     &kp RET   &trans    &kp RALT
                        >;
                };

                arrow_layer {
                        bindings = <
   &trans &trans &trans &trans &trans &trans    &trans &kp RA(Y) &kp UP &kp RA(P) &trans &trans
   &trans &kp RA(Q) &trans &trans &trans &trans    &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &trans &trans &trans &trans &trans &trans    &trans &trans   &trans   &trans    &trans &trans
                        &trans &trans &trans    &trans &trans &trans    
                        >;
                };

                func_layer {
                        bindings = <
   &trans &kp F1 &kp F2 &kp F3 &kp F4 &kp F5    &kp F6  &kp F7   &kp F8   &kp F9    &kp F10 &trans
   &trans &trans &trans &trans &trans &trans    &kp F12 &kp F4   &kp F5   &kp F6    &trans &trans
   &trans &trans &trans &rgb_ug RGB_TOG &rgb_ug RGB_COLOR_HSB(174,100,90) &trans    &kp F11 &kp F1   &kp F2   &kp F3    &trans &trans
                        &trans &trans &trans    &trans &trans &trans    
                        >;
                };
                umlaut_layer {
                        bindings = <
   &trans &trans &trans &trans &trans &trans    &trans &de_ue   &trans   &de_oe    &trans &trans
   &trans &de_ae &de_eszett &trans &trans &trans    &trans &trans   &trans   &trans    &trans &trans
   &trans &trans &trans &trans &trans &trans    &trans &trans   &trans   &trans    &trans &trans
                        &trans &trans &trans    &trans &trans &trans    
                        >;
                };
        };
};
